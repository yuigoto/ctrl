"use strict";
exports.__esModule = true;
var Utils_1 = require("../utils/Utils");
var Expressions_1 = require("../core/Expressions");
var Pis = (function () {
    function Pis() {
    }
    Pis.filter = function (value) {
        value = Utils_1.SanitizeToDigitsWithAssertion(value);
        if (!value)
            return "";
        if (value.length > 11)
            value = value.substring(0, 11);
        var slices = Expressions_1.PisMask.exec(value), returnable = "";
        if (slices[1] === undefined)
            return "";
        returnable += slices[1];
        if (slices[2] !== undefined)
            returnable += "." + slices[2];
        if (slices[3] !== undefined)
            returnable += "." + slices[3];
        if (slices[4] !== undefined)
            returnable += "-" + slices[4];
        return returnable;
    };
    Pis.format = function (value) {
        value = Utils_1.SanitizeToDigitsWithAssertion(value);
        if (!value)
            return false;
        if (value.length > 11)
            value = value.substring(0, 11);
        if (value.length < 11)
            value = Utils_1.PadWithZeroes(value, 11);
        return value.replace(Expressions_1.Pis, "$1.$2.$3-$4");
    };
    Pis.validate = function (value) {
        value = Utils_1.SanitizeToDigitsWithAssertion(value);
        if (value === false)
            return false;
        if (value.length > 11)
            value = value.substring(0, 11);
        if (value.length < 11)
            value = Utils_1.PadWithZeroes(value, 11);
        if (Utils_1.CheckNumberRepetition(value, 11))
            return false;
        var sum, val, multiplier;
        multiplier = 3;
        sum = 0;
        for (var l = 0; l < 10; l++) {
            sum += multiplier * value[l];
            multiplier -= 1;
            if (multiplier === 1)
                multiplier = 9;
        }
        val = 11 - (sum % 11);
        val = (val === 10 || val === 11) ? 0 : val;
        if (value[10] !== val.toString()) {
            return false;
        }
        return true;
    };
    return Pis;
}());
exports.Pis = Pis;
