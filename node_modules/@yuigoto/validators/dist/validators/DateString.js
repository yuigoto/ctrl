"use strict";
exports.__esModule = true;
var Utils_1 = require("../utils/Utils");
var Expressions_1 = require("../core/Expressions");
var DateString = (function () {
    function DateString() {
    }
    DateString.filter = function (value) {
        value = Utils_1.SanitizeToDigitsWithAssertion(value);
        if (!value)
            return "";
        if (value.length > 8)
            value = value.substring(0, 8);
        var slices = Expressions_1.RegularDateMask.exec(value), returnable = "";
        if (slices[1] === undefined)
            return "";
        returnable += slices[1];
        if (slices[2] !== undefined)
            returnable += "/" + slices[2];
        if (slices[3] !== undefined)
            returnable += "/" + slices[3];
        return returnable;
    };
    DateString.format = function (value) {
        value = Utils_1.SanitizeToDigitsWithAssertion(value);
        if (!value)
            return false;
        if (value.length > 8)
            value = value.substring(0, 8);
        return value.replace(Expressions_1.RegularDate, "$1/$2/$3");
    };
    DateString.validate = function (value) {
        value = Utils_1.SanitizeToDigitsWithAssertion(value);
        if (value === false)
            return false;
        var slices = Expressions_1.RegularDate.exec(value), day, month, year;
        if (!slices)
            return false;
        day = parseInt(slices[1]),
            month = parseInt(slices[2]),
            year = parseInt(slices[3]);
        if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1900) {
            return false;
        }
        var dateToCompare = new Date(year, month - 1, day), dateTime = Utils_1.PadWithZeroes(dateToCompare.getDate(), 2)
            + "/" + Utils_1.PadWithZeroes((dateToCompare.getMonth() + 1), 2)
            + "/" + dateToCompare.getFullYear();
        if (DateString.filter(value) !== dateTime) {
            return false;
        }
        return true;
    };
    return DateString;
}());
exports.DateString = DateString;
