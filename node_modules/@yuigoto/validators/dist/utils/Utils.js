"use strict";
exports.__esModule = true;
exports.AssertIsString = function (input, notEmpty) {
    if (notEmpty === void 0) { notEmpty = false; }
    if (typeof input !== "number" && typeof input !== "string")
        return false;
    if (typeof input === "number")
        input = input.toString();
    input = input.trim();
    if (notEmpty === true && input === "")
        return false;
    return input;
};
exports.CheckNumberRepetition = function (value, length) {
    if (length === void 0) { length = 11; }
    if (typeof value === "number")
        value = value.toString();
    for (var i = 0; i < 10; i++) {
        var _rgx = new RegExp("^" + i + "{" + length + "}$", "g");
        if (_rgx.test(value))
            return true;
    }
    return false;
};
exports.IsNumberOrString = function (value) {
    return (typeof value === "number" || typeof value === "string");
};
exports.PadWithZeroes = function (input, length, toRight) {
    if (toRight === void 0) { toRight = false; }
    if (typeof input === "number")
        input = input.toString();
    if (input.length < length) {
        while (input.length < length) {
            input = (toRight === true) ? input + "0" : "0" + input;
        }
    }
    return input;
};
exports.SanitizeToDigits = function (input) {
    if (typeof input === "number")
        input = input.toString();
    input = input.replace(/[^\d]+/g, '');
    return input;
};
exports.SanitizeToDigitsWithAssertion = function (value) {
    value = exports.AssertIsString(value, true);
    if (value === false)
        return false;
    value = exports.SanitizeToDigits(value);
    if (!value)
        return false;
    return value;
};
